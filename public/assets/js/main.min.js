! function () {
    "use strict";
    const select = (el, all = !1) => (el = el.trim(), all ? [...document.querySelectorAll(el)] : document.querySelector(el)),
        on = (type, el, listener, all = !1) => {
            all ? select(el, all).forEach(e => e.addEventListener(type, listener)) : select(el, all).addEventListener(type, listener)
        },
        onscroll = (el, listener) => {
            el.addEventListener("scroll", listener)
        };
    select(".toggle-sidebar-btn") && on("click", ".toggle-sidebar-btn", (function (e) {
        select("body").classList.toggle("toggle-sidebar")
    })), select(".search-bar-toggle") && on("click", ".search-bar-toggle", (function (e) {
        select(".search-bar").classList.toggle("search-bar-show")
    }));
    let navbarlinks = select("#navbar .scrollto", !0);
    const navbarlinksActive = () => {
        let position = window.scrollY + 200;
        navbarlinks.forEach(navbarlink => {
            if (!navbarlink.hash) return;
            let section = select(navbarlink.hash);
            section && (position >= section.offsetTop && position <= section.offsetTop + section.offsetHeight ? navbarlink.classList.add("active") : navbarlink.classList.remove("active"))
        })
    };
    window.addEventListener("load", navbarlinksActive), onscroll(document, navbarlinksActive);
    let selectHeader = select("#header");
    if (selectHeader) {
        const headerScrolled = () => {
            window.scrollY > 100 ? selectHeader.classList.add("header-scrolled") : selectHeader.classList.remove("header-scrolled")
        };
        window.addEventListener("load", headerScrolled), onscroll(document, headerScrolled)
    }
    let backtotop = select(".back-to-top");
    if (backtotop) {
        const toggleBacktotop = () => {
            window.scrollY > 100 ? backtotop.classList.add("active") : backtotop.classList.remove("active")
        };
        window.addEventListener("load", toggleBacktotop), onscroll(document, toggleBacktotop)
    }
    var tooltipTriggerList, tooltipList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]')).map((function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl)
    }));
    select(".quill-editor-default") && new Quill(".quill-editor-default", {
        theme: "snow"
    }), select(".quill-editor-bubble") && new Quill(".quill-editor-bubble", {
        theme: "bubble"
    }), select(".quill-editor-full") && new Quill(".quill-editor-full", {
        modules: {
            toolbar: [
                [{
                    font: []
                }, {
                    size: []
                }],
                ["bold", "italic", "underline", "strike"],
                [{
                    color: []
                }, {
                    background: []
                }],
                [{
                    script: "super"
                }, {
                    script: "sub"
                }],
                [{
                    list: "ordered"
                }, {
                    list: "bullet"
                }, {
                    indent: "-1"
                }, {
                    indent: "+1"
                }],
                ["direction", {
                    align: []
                }],
                ["link", "image", "video"],
                ["clean"]
            ]
        },
        theme: "snow"
    });
    var useDarkMode = window.matchMedia("(prefers-color-scheme: dark)").matches;
    tinymce.init({
        selector: "textarea.tinymce-editor",        
        plugins: "print preview paste importcss searchreplace autolink autosave save directionality code visualblocks visualchars fullscreen image link media template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists wordcount imagetools textpattern noneditable help charmap quickbars emoticons",
        imagetools_cors_hosts: ["picsum.photos"],
        menubar: "file edit view insert format tools table help",
        toolbar: "undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat | pagebreak | charmap emoticons | fullscreen  preview save print | insertfile image media template link anchor codesample | ltr rtl",
        toolbar_sticky: !0,
        autosave_ask_before_unload: !0,
        autosave_interval: "30s",
        autosave_prefix: "{path}{query}-{id}-",
        autosave_restore_when_empty: !1,
        autosave_retention: "2m",
        image_advtab: !0,
        link_list: [{
            title: "My page 1",
            value: "https://www.tiny.cloud"
        }, {
            title: "My page 2",
            value: "http://www.moxiecode.com"
        }],
        image_list: [{
            title: "My page 1",
            value: "https://www.tiny.cloud"
        }, {
            title: "My page 2",
            value: "http://www.moxiecode.com"
        }],
        image_class_list: [{
            title: "None",
            value: ""
        }, {
            title: "Some class",
            value: "class-name"
        }],
        importcss_append: !0,
        file_picker_callback: function (callback, value, meta) {
            "file" === meta.filetype && callback("https://www.google.com/logos/google.jpg", {
                text: "My text"
            }), "image" === meta.filetype && callback("https://www.google.com/logos/google.jpg", {
                alt: "My alt text"
            }), "media" === meta.filetype && callback("movie.mp4", {
                source2: "alt.ogg",
                poster: "https://www.google.com/logos/google.jpg"
            })
        },
        templates: [{
            title: "New Table",
            description: "creates a new table",
            content: '<div class="mceTmpl"><table width="98%%"  border="0" cellspacing="0" cellpadding="0"><tr><th scope="col"> </th><th scope="col"> </th></tr><tr><td> </td><td> </td></tr></table></div>'
        }, {
            title: "Starting my story",
            description: "A cure for writers block",
            content: "Once upon a time..."
        }, {
            title: "New list with dates",
            description: "New List with dates",
            content: '<div class="mceTmpl"><span class="cdate">cdate</span><br /><span class="mdate">mdate</span><h2>My List</h2><ul><li></li><li></li></ul></div>'
        }],
        template_cdate_format: "[Date Created (CDATE): %m/%d/%Y : %H:%M:%S]",
        template_mdate_format: "[Date Modified (MDATE): %m/%d/%Y : %H:%M:%S]",
        height: 600,
        image_caption: !0,
        quickbars_selection_toolbar: "bold italic | quicklink h2 h3 blockquote quickimage quicktable",
        noneditable_noneditable_class: "mceNonEditable",
        toolbar_mode: "sliding",
        contextmenu: "link image imagetools table",
        skin: useDarkMode ? "oxide-dark" : "oxide",
        content_css: useDarkMode ? "dark" : "default",
        content_style: "body { font-family:Helvetica,Arial,sans-serif; font-size:14px }"
    });
    var needsValidation = document.querySelectorAll(".needs-validation");
    Array.prototype.slice.call(needsValidation).forEach((function (form) {
        form.addEventListener("submit", (function (event) {
            form.checkValidity() || (event.preventDefault(), event.stopPropagation()), form.classList.add("was-validated")
        }), !1)
    }));
    const datatables = select(".datatable", !0);
    datatables.forEach(datatable => {
        new simpleDatatables.DataTable(datatable)
    });
    const mainContainer = select("#main");
    mainContainer && setTimeout(() => {
        new ResizeObserver((function () {
            select(".echart", !0).forEach(getEchart => {
                echarts.getInstanceByDom(getEchart).resize()
            })
        })).observe(mainContainer)
    }, 200)
}(), $(document).ready((function () {
    tinymce.init({
        selector: 'textarea#risk_assestment,textarea#lup_proposed,textarea#lup_current,textarea#lup_reason',
        height: '300',
        min_chars: 10,
        plugins: [
            'advlist', 'autolink', 'link', 'image', 'lists', 'charmap', 'preview', 'anchor', 'pagebreak',
            'searchreplace', 'wordcount', 'visualblocks', 'visualchars', 'code', 'fullscreen', 'insertdatetime',
            'media', 'table', 'emoticons', 'template', 'help'
        ],
        toolbar: 'undo redo | styles | bold italic | alignleft aligncenter alignright alignjustify | ' +
            'bullist numlist outdent indent | link image | print preview media fullscreen | ' +
            'forecolor backcolor emoticons | help',
        menubar: 'file edit view insert format tools table help',
        skin: (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'oxide-dark' : 'oxide'),
        content_css: 'default'

    });
    if ($(".preloader").fadeOut(), $(".alert-success").fadeIn().delay(10e3).fadeOut(), $(".alert-danger").fadeIn().delay(10e3).fadeOut(), $(".alert-warning").fadeIn().delay(10e3).fadeOut(), $(".alert-info").fadeIn().delay(10e3).fadeOut(), $("#jam").clock({
            format: "24",
            calendar: "false"
        }), $('a[data-bs-toggle="tab"]').on("show.bs.tab", (function (e) {
            localStorage.setItem("activeTab", $(e.target).attr("href"))
        })), $("[id*='Menu']").length) {
        var activeTab = localStorage.getItem("activeTab");
        $("#FLPMenu").length && $('#FLPMenu a[href="#details"]').tab("show"), $("PartSAPMenu").length && $('PartSAPMenu a[href="#basicdata"]').tab("show"),
            $("#LUPMenu").length && $('#LUPMenu a[href="#initiation"]').tab("show")
    } else localStorage.removeItem("activeTab");
    activeTab ? ($('#FLPMenu a[href="' + activeTab + '"]').tab("show"), $('#PartSAPMenu a[href="' + activeTab + '"]').tab("show"), $('#LUPMenu a[href="' + activeTab + '"]').tab("show")) : ($('#FLPMenu a[href="#details"]').tab("show"), $('#PartSAPMenu a[href="#basicdata"]').tab("show"), $('#LUPMenu a[href="#details"]').tab("show")), $.fn.editable.defaults.mode = "inline", $.ajaxSetup({
            headers: {
                "X-CSRF-TOKEN": $('meta[name="csrf-token"]').attr("content")
            }
        }), 
        $(document).on("change", "#code_relateddepartment", (function () {
            var code_relateddepartment = $(this).val();            
            $.ajax({
                type: "post",
                url: "/lup/approvals/autofill",
                data: {
                    code_relateddepartment: code_relateddepartment
                },
                dataType: "json",
                success: function (data) {     
                                 
                    document.getElementById("username_relateddepartment").value = data.username
                    document.getElementById("department_relateddepartment").value = data.type
                },
                error: function (data) {
                    document.getElementById("username_relateddepartment").innerText = "Error retrived data"
                }
            })
        })),         
        $(document).on("change", "#old_part", (function () {
            var old_part = $(this).val();
            $.ajax({
                type: "post",
                url: "/masterpart/autofill_old_desc",
                data: {
                    old_part: old_part
                },
                dataType: "json",
                success: function (data) {
                    document.getElementById("old_desc").value = data.sap_desc
                },
                error: function (data) {
                    document.getElementById("label_old_part").innerText = "Error retrived data"
                }
            })
        })), 
        $(document).on("change", "#modaltxtadd_partsap", (function () {
            var sap_part = $(this).val();
            $.ajax({
                type: "post",
                url: "/masterpart/autofill_old_desc",
                data: {
                    sap_part: sap_part
                },
                dataType: "json",
                success: function (data) {                    
                    document.getElementById("modaltxtadd_partdesc").value = data.sap_desc
                },
                error: function (data) {
                    document.getElementById("modaltxtadd_partdesc").innerText = "Error retrived data"
                }
            })
        })), 
        $(document).on("change", "#modaltxtedit_partsap", (function () {
            var sap_part = $(this).val();
            $.ajax({
                type: "post",
                url: "/masterpart/autofill_old_desc",
                data: {
                    sap_part: sap_part
                },
                dataType: "json",
                success: function (data) {
                    document.getElementById("modaltxtedit_partdesc").value = data.sap_desc
                },
                error: function (data) {
                    document.getElementById("modaltxtedit_partdesc").innerText = "Error retrived data"
                }
            })
        })),
        $(document).on("change", "#sap_prefix", (function () {
            var sap_prefix = $(this).val();
            $.ajax({
                type: "post",
                url: "/masterpart/autofill_old_desc",
                data: {
                    sap_prefix: sap_prefix
                },
                dataType: "json",
                success: function (data) {
                    console.log(data.mat_type), document.getElementById("sap_mat_type").value = data.mat_type, document.getElementById("sap_mat_group").value = data.mat_group, document.getElementById("rdms_status_part").value = "OK", document.getElementById("sap_status_part").value = "N"
                },
                error: function (data) {
                    document.getElementById("label_sap_prefix").innerText = "Error retrived data"
                }
            })
        })),
        $(document).on("change", "#duedate_type", (function () { //hide or show due date finish on LUP Menu when changed
            var duedate_type = $(this).val();
            if (duedate_type == "Temporary") {
                $('label[for=duedate_finish], input#duedate_finish').show()
                document.getElementById("labelfor_duedate_start").innerText = "Due Date Start"
            } else {
                $('label[for=duedate_finish], input#duedate_finish').hide()
                document.getElementById("labelfor_duedate_start").innerText = "Due Date Implementation"
            }
        })),
        $(".table").on("click", ":checkbox", (function () {
            var updated = $(this).is(":checked"),
                currentRow, id_audit = $(this).closest("tr").data("value"),
                jenis = "checkbox";
            $.ajax({
                type: "post",
                url: "/masterpart/tesupdatehistory",
                data: {
                    id_audit: id_audit,
                    updated: updated,
                    jenis: jenis
                },
                dataType: "json",
                success: function (data) {
                    console.log("oke " + id_audit + " updated")
                },
                error: function (data) {
                    console.log("Error update data")
                }
            })
        })), $("#RDMSHistoryTable").on("click", ".update", (function () {
            $(".update").editable({
                url: "/masterpart/tesupdatehistory",
                type: "text",
                dataType: "json",
                pk: 1,
                name: "name",
                jenis: "tes",
                title: "Enter name"
            })
        }))
}));
(function ($) {
    $.clock = {
        version: "2.0.1",
        locale: {}
    };
    t = [];
    $.fn.clock = function (d) {
        var c = {
            it: {
                weekdays: ["Domenica", "Lunedì", "Martedì", "Mercoledì", "Giovedì", "Venerdì", "Sabato"],
                months: ["Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno", "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre"]
            },
            en: {
                weekdays: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
                months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
            },
            es: {
                weekdays: ["Domingo", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado"],
                months: ["Enero", "Febrero", "Marzo", "Abril", "May", "junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"]
            },
            de: {
                weekdays: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"],
                months: ["Januar", "Februar", "März", "April", "könnte", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"]
            },
            fr: {
                weekdays: ["Dimanche", "Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi"],
                months: ["Janvier", "Février", "Mars", "Avril", "May", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"]
            },
            ru: {
                weekdays: ["Воскресенье", "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота"],
                months: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"]
            }
        };
        return this.each(function () {
            $.extend(c, $.clock.locale);
            d = d || {};
            d.timestamp = d.timestamp || "z";
            y = new Date().getTime();
            d.sysdiff = 0;
            if (d.timestamp != "z") {
                d.sysdiff = d.timestamp - y
            }
            d.langSet = d.langSet || "en";
            d.format = d.format || ((d.langSet != "en") ? "24" : "12");
            d.calendar = d.calendar || "true";
            if (!$(this).hasClass("jqclock")) {
                $(this).addClass("jqclock")
            }
            var e = function (g) {
                    if (g < 10) {
                        g = "0" + g
                    }
                    return g
                },
                f = function (j, n) {
                    var r = $(j).attr("id");
                    if (n == "destroy") {
                        clearTimeout(t[r])
                    } else {
                        m = new Date(new Date().getTime() + n.sysdiff);
                        var p = m.getHours(),
                            l = m.getMinutes(),
                            v = m.getSeconds(),
                            u = m.getDay(),
                            i = m.getDate(),
                            k = m.getMonth(),
                            q = m.getFullYear(),
                            o = "",
                            z = "",
                            w = n.langSet;
                        if (n.format == "12") {
                            o = " AM";
                            if (p > 11) {
                                o = " PM"
                            }
                            if (p > 12) {
                                p = p - 12
                            }
                            if (p == 0) {
                                p = 12
                            }
                        }
                        p = e(p);
                        l = e(l);
                        v = e(v);
                        if (n.calendar != "false") {
                            z = ((w == "en") ? "<span class='clockdate'>" + c[w].weekdays[u] + ", " + c[w].months[k] + " " + i + ", " + q + "</span>" : "<span class='clockdate'>" + c[w].weekdays[u] + ", " + i + " " + c[w].months[k] + " " + q + "</span>")
                        }
                        $(j).html(z + "<span class='clocktime'>" + p + ":" + l + ":" + v + o + "</span>");
                        t[r] = setTimeout(function () {
                            f($(j), n)
                        }, 1000)
                    }
                };
            f($(this), d)
        })
    };
    return this
})(jQuery);

if ($("#LUPMenu").length) {
    var duedate_type = $("#duedate_type").find(":selected").text(); //hide or show due date finish on LUP Menu when first load
    if (duedate_type == "Temporary") {
        $('label[for=duedate_finish], input#duedate_finish').show();
        document.getElementById("labelfor_duedate_start").innerText = "Due Date Start"
    } else {
        $('label[for=duedate_finish], input#duedate_finish').hide()
    }
}

var headerHeight = 200;

$(window).bind('scroll', function () {
    if ($(window).scrollTop() > headerHeight) {
        $('#LUPMenu').removeClass('nav nav-tabs nav-tabs-bordered');
        $('#LUPMenu').addClass('nav nav-tabs sticky-top nav-tabs-bordered position-absolute top-100');

    } else {
        $('#LUPMenu').removeClass('nav nav-tabs sticky-top nav-tabs-bordered position-absolute top-100');
        $('#LUPMenu').addClass('nav nav-tabs nav-tabs-bordered');
    }
});

var idleTime = 0;
    $(document).ready(function () {
        // Increment the idle time counter every minute.
        var idleInterval = setInterval(timerIncrement, 60000); // 1 minute
        console.log(idleTime)
        // Zero the idle timer on mouse movement.
        $(this).mousemove(function (e) {
            idleTime = 0;            
        });
        $(this).keypress(function (e) {
            idleTime = 0;            
        });
    });

    function timerIncrement() {
        idleTime = idleTime + 1;
        
        if (idleTime > 19) { // 20 minutes
            console.log(idleTime)
            //window.location.reload();
        }
    }
